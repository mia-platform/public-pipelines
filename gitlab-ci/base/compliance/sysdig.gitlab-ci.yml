variables:
  SYSDIG_IMAGE_TAG: latest

sysdig:
  stage: compliance

  image:
    name: ${CONTAINER_PATH}/sysdig-pipeline:${SYSDIG_IMAGE_TAG}

  variables:
    SYSDIG_SECURE_TOKEN: "" # the sysdig secure token of your instance
    SYSDIG_SECURE_BACKEND_ENDPOINT: "" # the sysdig secure backend endpoint for your instance
    GIT_STRATEGY: none # if you need files in the repository chagne the strategy to fetch

  script:
  - echo "${CI_JOB_NAME} is used for configuration only, and its script should not be executed"
  - exit 1

  rules:
  - when: never

  dependencies: []

  artifacts:
    paths:
    - container-scanning-report.json
    when: always

.sysdig-scan:
  extends: sysdig

  script:
  - !reference [.container-base, script]
  - if [ -z "${SYSDIG_SECURE_BACKEND_ENDPOINT}" ]; then echo "SYSDIG_SECURE_BACKEND_ENDPOINT is not set."; exit 1; fi;
  - echo "$REGISTRY_IMAGE" > registry_image.txt

  after_script:
  - if [ ! -f "registry_image.txt" ]; then exit 0; fi;
  - registry_image=$(cat registry_image.txt)
  - echo "${REGISTRY_PASSWORD}" | oras login --username "${REGISTRY_USER}" --password-stdin "${REGISTRY}"
  - |
      oras manifest fetch ${registry_image} | jq -n -r -c '.manifests[].digest' | \
      while read digest; do
        full_image_name="${registry_image}@${digest}"
        oras manifest delete --force "${full_image_name}"
      done
  - oras manifest delete --force "${registry_image}"

sysdig-container_scanning:
  extends: .sysdig-scan

  variables:
    SECURE_API_TOKEN: "${SYSDIG_SECURE_TOKEN}"

  script:
  - !reference [.sysdig-scan, script]
  - sysdig-cli-scanner --version
  - sysdig-cli-scanner --console-log --apiurl "${SYSDIG_SECURE_BACKEND_ENDPOINT}" "${REGISTRY_IMAGE}" --json-scan-result="${CI_PROJECT_DIR}/container-scanning-report.json"
  - rm registry_image.txt

  rules:
  - if: $CONTAINER_SCANNING_DISABLED == 'true' || $CONTAINER_SCANNING_DISABLED == '1'
    when: never
  - if: $SYSDIG_LEGACY_SCAN == 'true' || $SYSDIG_LEGACY_SCAN == '1'
    when: never
  - if: $CI_COMMIT_BRANCH &&
        $SYSDIG_SECURE_TOKEN

sysdig-legacy-container_scanning:
  extends: sysdig

  variables:
    SYSDIG_INLINE_IMAGE: "quay.io/sysdig/secure-inline-scan:2"

  services:
  - name: docker:24-dind

  script:
  - !reference [.sysdig-scan, script]
  - docker pull ${SYSDIG_INLINE_IMAGE}
  - docker inspect ${SYSDIG_INLINE_IMAGE}
  - |
    docker run --rm -v ${CI_PROJECT_DIR}:/scan \
    ${SYSDIG_INLINE_IMAGE} \
    "${REGISTRY_IMAGE}" \
    --sysdig-url "${SYSDIG_SECURE_BACKEND_ENDPOINT}" \
    --sysdig-token "${SYSDIG_SECURE_TOKEN}" \
    --registry-auth-basic "${REGISTRY_USER}:${REGISTRY_PASSWORD}" \
    --write-json "/scan/container-scanning-report.json"
  - rm registry_image.txt

  rules:
  - if: $CONTAINER_SCANNING_DISABLED == 'true' || $CONTAINER_SCANNING_DISABLED == '1'
    when: never
  # Enable job if we want the legacy scanner, the token is set and the pipeline is for a branch or tag
  - if: $CI_COMMIT_BRANCH &&
        $SYSDIG_LEGACY_SCAN &&
        $SYSDIG_SECURE_TOKEN
