variables:
  REGISTRY: $CI_REGISTRY
  IMAGE_NAME: ""
  IMAGE_PLATFORMS: linux/amd64,linux/arm64
  REGISTRY_USER: $CI_REGISTRY_USER
  REGISTRY_PASSWORD: $CI_REGISTRY_PASSWORD
  DOCKER_IMAGE_TAG: 1

.container-base:
  script:
  - export image_tag="${CI_COMMIT_TAG:-$CI_COMMIT_SHORT_SHA}"
  - |
    if [[ "${ENABLE_SEMVER_TAG_WITHOUT_VERSION_PREFIX}" == "true" || "${ENABLE_SEMVER_TAG_WITHOUT_VERSION_PREFIX}" == "1" ]]; then
      image_tag="$(echo "${image_tag}" | perl -pe 's/^v(?P<semver>(?:0|[1-9]\d*)\.(?:0|[1-9]\d*)\.(?:0|[1-9]\d*)(?:-(?:(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+(?:[0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)$/$+{semver}/')"
    fi
  - |
    if [[ "${REGISTRY}" != "${CI_REGISTRY}" ]]; then
      temp_registry_image="${REGISTRY}/${IMAGE_NAME}:${image_tag}"
    else
      temp_registry_image="${CI_REGISTRY_IMAGE}:${image_tag}"
    fi
  - export REGISTRY_IMAGE="${temp_registry_image}"
  - |
    if [[ "${CI_COMMIT_TAG}" ]]; then
      echo "Running on tag '$CI_COMMIT_TAG': tag = ${image_tag}"
    elif [[ "${OVERRIDE_BRANCH_IMAGE_TAG}" ]]; then
      image_tag="${OVERRIDE_BRANCH_IMAGE_TAG}"
      echo "Running on branch '$CI_COMMIT_BRANCH': tag = ${image_tag}"
    elif [[ "${CI_COMMIT_BRANCH}" == "${CI_DEFAULT_BRANCH}" ]]; then
      image_tag="latest"
      echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
    else
      image_tag="${CI_COMMIT_REF_SLUG}"
      echo "Running on branch '$CI_COMMIT_BRANCH': tag = ${image_tag}"
    fi

.docker-base:
  image:
    name: ${CONTAINER_PATH}/docker-pipeline:${DOCKER_IMAGE_TAG}

  services:
  - name: docker:24-dind

  dependencies: []

.docker-build:
  extends: .docker-base

  variables:
    DOCKERBUILD_DIR: $CI_PROJECT_DIR
    DOCKERFILE_PATH: $CI_PROJECT_DIR/Dockerfile
    DOCKERBUILD_OUTPUT: "type=image,push=true"

  script:
  - !reference [.container-base, script]
  - docker info
  - docker buildx version
  - oras version
  - source /usr/local/lib/docker_helpers.sh
  - docker_login "${REGISTRY_USER}" "${REGISTRY_PASSWORD}" "${REGISTRY}"
  - setup_docker_context
  - |
    docker buildx build "${DOCKERBUILD_DIR}" \
      --file="${DOCKERFILE_PATH}" \
      --output=${DOCKERBUILD_OUTPUT} \
      --platform="${IMAGE_PLATFORMS}" \
      --tag="${REGISTRY_IMAGE}" \
      --build-arg="COMMIT_SHA=${CI_COMMIT_SHA}" \
      --build-arg="VERSION=${image_tag}" \
      ${DOCKERBUILD_ADDITIONAL_FLAGS} \
      --provenance=false
  - cleanup_docker_context

.docker-deploy:
  extends: .docker-base

  script:
  - !reference [.container-base, script]
  - source /usr/local/lib/docker_helpers.sh
  - docker_login "${REGISTRY_USER}" "${REGISTRY_PASSWORD}" "${REGISTRY}"
  - |
    if [[ "${REGISTRY}" != "${CI_REGISTRY}" ]]; then
      retagged_image="${REGISTRY}/${IMAGE_NAME}:${image_tag}"
    else
      retagged_image="${CI_REGISTRY_IMAGE}:${image_tag}"
    fi
  - |
    if [[ -z "${CI_COMMIT_TAG}" ]]; then
      docker_retag_image "${REGISTRY_IMAGE}" "${retagged_image}"
    else
      syft version
      cosign version
      docker_create_sbom_and_sign_image "${REGISTRY_IMAGE}"
    fi

  artifacts:
    paths:
    - "**.spdx.json"
